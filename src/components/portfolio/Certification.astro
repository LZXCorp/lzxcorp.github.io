---
import Heading from "../ui/Heading.astro";
import { Icon } from "astro-icon/components";

// badgelink and obtained are optional if NOT obtained yet
// expires is optional if not applicable
const CERTIFICATION = [
  {
    title: "Certified Active Directory Pentesting Expert",
    issuer: "HackTheBox",
    logo: "/images/logos/htb.svg",
    badgeicon: "/images/cert/cape.webp",
    badgelink: "",
    obtained: "",
    accent: "rgb(231 61 180)",
    tags: [
      "Penetration Testing",
      "Active Directory",
      "Specialized",
    ],
    hidden: true,
  },
  {
    title: "Certified Information Systems Auditor (CISA)",
    issuer: "ISACA",
    logo: "/images/logos/isaca.png",
    badgeicon: "/images/cert/cisa.png",
    badgelink: "",
    obtained: "",
    accent: "rgb(60 84 163)",
    tags: [
      "Theoretical",
      "Auditing",
      "Risk Management",
      "Governance & Compliance",
    ],
    hidden: true,
  },
  {
    title: "Offensive Security Certified Professional (OSCP)",
    issuer: "Offsec",
    logo: "/images/logos/offsec.png",
    badgeicon: "/images/cert/oscp.svg",
    badgelink: "",
    obtained: "",
    accent: "rgb(255 90 0)",
    tags: [
      "Penetration Testing",
      "Network Security",
      "Exploitation",
      "Beginner",
    ],
    hidden: true,
  },
  {
    title: "Certified Penetration Testing Specialist",
    issuer: "HackTheBox",
    logo: "/images/logos/htb.svg",
    badgeicon: "/images/cert/cpts.webp",
    badgelink: "",
    obtained: "",
    accent: "rgb(169 67 251)",
    tags: [
      "Penetration Testing",
      "Network Security",
      "Web Attacks",
      "Active Directory",
      "Intermediate",
    ],
  },
  {
    title: "Azure Fundamentals",
    issuer: "Microsoft",
    logo: "/images/logos/microsoft.png",
    badgeicon: "/images/cert/az900.png",
    badgelink: "",
    obtained: "",
    accent: "rgb(0 140 255)",
    tags: [
      "Azure",
      "Cloud Computing",
      "Foundational",
    ],
    hidden: true,
  },
  {
    title: "Solutions Architect (Associate)",
    issuer: "Amazon Web Services (AWS)",
    logo: "/images/logos/aws.webp",
    badgeicon: "/images/cert/aws-saa.png",
    badgelink: "",
    obtained: "",
    accent: "rgb(53 54 237)",
    tags: [
      "AWS",
      "Cloud Computing",
      "Cloud Architecture",
      "Infrastructure Design",
      "Associate",
    ],
  },
  {
    title: "Certified Ethical Hacker",
    issuer: "EC-Council",
    logo: "/images/logos/eccouncil.png",
    badgeicon: "/images/cert/ceh.webp",
    badgelink: "",
    obtained: "12-2024",
    expires: "01-2026",
    accent: "rgb(237 6 2)",
    tags: ["Theoretical", "Networking", "PKI Architecture", "Foundational"],
  },
  {
    title: "Certified Cloud Practitioner",
    issuer: "Amazon Web Services (AWS)",
    logo: "/images/logos/aws.webp",
    badgeicon: "/images/cert/aws-clf.png",
    badgelink:
      "https://www.credly.com/badges/5f9788c9-7233-44c7-bcd2-c7b44dccd075/public_url",
    obtained: "10-2024",
    expires: "10-2027",
    accent: "rgb(255 153 0)",
    tags: ["AWS", "Cloud Computing", "Foundational"],
  },
];

const parseMonthYear = (s: string | undefined) => {
  if (!s) return null;
  const [m, y] = s.split("-") as [string, string];
  const month = Number(m);
  const year = Number(y);
  if (!Number.isFinite(month) || !Number.isFinite(year)) return null;
  return new Date(year, month, 0, 23, 59, 59, 999);
};
const now = new Date();
const isExpired = (expires?: string) => {
  const d = parseMonthYear(expires);
  return d ? d.getTime() < now.getTime() : false;
};
---

<section class="py-8 px-8 max-md:py-4 mb-4 scroll-m-16 overflow-visible" id="certifications">
  <div class="flex flex-col pt-8 max-w-6xl mx-auto overflow-visible">
    <div class="flex gap-3 items-center justify-center text-center flex-wrap">
      <Icon class="text-3xl text-amber-400 max-sm:text-2xl" name="award" />
      <Heading text="Technical" textGradient="Certifications" level={2} />
    </div>

    <div class="mt-6 flex justify-center">
      <button
        id="toggleHiddenCerts"
        class="toggle-hidden-btn inline-flex items-center gap-2 rounded-full border border-zinc-300 dark:border-white/20 bg-white/80 dark:bg-zinc-800/80 px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 transition-all hover:border-zinc-500 dark:hover:border-white/40 hover:bg-zinc-100 dark:hover:bg-zinc-700 backdrop-blur-sm cursor-pointer group/btn"
        aria-label="Toggle hidden certifications"
      >
        <span class="icon-wrapper">
          <Icon name="eye-off" class="text-lg icon-default transition-opacity duration-200" />
          <Icon name="eye" class="text-lg icon-hover absolute inset-0 opacity-0 transition-opacity duration-200" />
        </span>
        <span>Show Hidden</span>
      </button>
    </div>

    <div class="mt-10 overflow-visible px-4 md:px-0" aria-label="Professional certifications">
      <ul
        id="certificationsContainer"
        class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 items-stretch overflow-visible"
      >
        {
          CERTIFICATION.map((cert, index) => {
            const CardTag = cert.badgelink ? "a" : "div";
            const obtainedStr =
              typeof cert.obtained === "string" ? cert.obtained.trim() : "";
            const expiresStr =
              typeof cert.expires === "string" ? cert.expires.trim() : "";
            const expired = isExpired(expiresStr);
            const obtained = obtainedStr !== "";
            const isHidden = cert.hidden === true;
            const grayAccent = "rgb(156 163 175)"; // gray-400
            return (
              <li class={`h-full cert-item ${isHidden ? "hidden-cert" : ""} snap-center overflow-visible`} data-hidden={isHidden}>
                <article
                  role="article"
                  aria-labelledby={`cert-title-${index}`}
                  class="h-full"
                >
                  <CardTag
                    {...(cert.badgelink
                      ? {
                          href: cert.badgelink,
                          target: "_blank",
                          rel: "noopener noreferrer",
                          "aria-label": `Open ${cert.title} badge`,
                        }
                      : {})}
                    class="group relative h-full rounded-2xl border border-zinc-200/50 dark:border-white/10 bg-white/80 dark:bg-[var(--accent)]/15 backdrop-blur-sm p-6 ring-1 ring-zinc-200/50 dark:ring-white/10 transition-all duration-300 hover:border-[var(--accent-real)]/50 hover:ring-[var(--accent-real)]/50 hover:shadow-[0_0_30px_-5px_var(--accent-blur)] hover:dark:bg-[var(--accent-real)]/15 flex flex-col overflow-visible"
                    style={`--accent-real: ${cert.accent || "rgb(56 189 248)"}; --accent: ${isHidden ? grayAccent : cert.accent || "rgb(56 189 248)"}; --accent-blur: color-mix(in srgb, var(--accent-real) 60%, transparent); --accent-light: color-mix(in srgb, var(--accent) 30%, transparent);`}
                  >
                    <div class="absolute inset-0 rounded-2xl overflow-hidden pointer-events-none -z-10">
                    <span
                      aria-hidden="true"
                      class="pointer-events-none absolute inset-0 z-0 opacity-25"
                    >
                      <span class="absolute inset-0 bg-gradient-to-br from-[var(--accent-light)] via-transparent to-transparent" />
                      <span class="absolute inset-0 bg-gradient-to-tl from-[var(--accent-light)] via-transparent to-transparent opacity-40" />
                    </span>

                    <span
                      aria-hidden="true"
                      class="pointer-events-none absolute inset-0 z-0 animate-[spin_20s_linear_infinite] group-hover:animate-[spin_10s_linear_infinite]"
                    >
                      <span class="absolute -top-20 left-1/2 -translate-x-1/2 size-48 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent),_transparent_60%)] opacity-25 blur-3xl group-hover:size-64 group-hover:opacity-70 transition-all duration-500" />

                      <span class="absolute top-1/2 -right-20 -translate-y-1/2 size-56 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent),_transparent_60%)] opacity-28 blur-3xl group-hover:size-72 group-hover:opacity-75 transition-all duration-500" />

                      <span class="absolute -bottom-20 left-1/2 -translate-x-1/2 size-52 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent),_transparent_60%)] opacity-22 blur-3xl group-hover:size-68 group-hover:opacity-65 transition-all duration-500" />

                      <span class="absolute top-1/2 -left-20 -translate-y-1/2 size-44 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent),_transparent_60%)] opacity-24 blur-3xl group-hover:size-60 group-hover:opacity-68 transition-all duration-500" />
                    </span>

                    <span
                      aria-hidden="true"
                      class="pointer-events-none absolute inset-0 z-0 animate-[spin_15s_linear_infinite_reverse] group-hover:animate-[spin_8s_linear_infinite_reverse]"
                    >
                      <span class="absolute -top-16 -left-16 size-40 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent-blur),_transparent_65%)] opacity-18 blur-3xl group-hover:size-56 group-hover:opacity-50 transition-all duration-500" />

                      <span class="absolute -top-16 -right-16 size-36 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent-blur),_transparent_65%)] opacity-20 blur-3xl group-hover:size-52 group-hover:opacity-53 transition-all duration-500" />

                      <span class="absolute -bottom-16 -right-16 size-44 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent-blur),_transparent_65%)] opacity-16 blur-3xl group-hover:size-60 group-hover:opacity-48 transition-all duration-500" />

                      <span class="absolute -bottom-16 -left-16 size-38 rounded-full bg-[radial-gradient(circle_at_center,_var(--accent-blur),_transparent_65%)] opacity-22 blur-3xl group-hover:size-54 group-hover:opacity-55 transition-all duration-500" />
                    </span>
                    </div>

                    {(!cert.obtained ||
                      (typeof cert.obtained === "string" &&
                        cert.obtained.trim() === "")) && (
                      <div class="pointer-events-none absolute inset-0 z-10 overflow-hidden rounded-2xl">
                        <span
                          aria-hidden="true"
                          class="absolute -right-8 top-3 block h-6 w-28 rotate-45 bg-red-500/90 dark:bg-red-500/90 shadow-lg"
                        />
                        <span class="sr-only">In progress</span>
                      </div>
                    )}

                    <div class="relative flex items-start justify-between gap-4 flex-1">
                      <div class="flex min-w-0 flex-col">
                        <h3
                          id={`cert-title-${index}`}
                          class="text-base md:text-lg font-bold leading-snug"
                          style="color: var(--accent)"
                        >
                          {cert.title}
                        </h3>
                        <p class="text-xs font-medium text-zinc-900 dark:text-white/80">
                          {cert.issuer}
                        </p>
                      </div>

                      {cert.badgeicon && (
                        <div class="relative shrink-0">
                          <img
                            src={cert.badgeicon}
                            alt={`${cert.title} badge`}
                            class="h-24 w-24 md:h-28 md:w-28 lg:h-32 lg:w-32 object-contain opacity-95 transition-transform duration-200 group-hover:scale-105"
                            loading={index < 3 ? "eager" : "lazy"}
                            fetchpriority={index < 3 ? "high" : "auto"}
                            decoding="async"
                          />
                          {cert.logo && (
                            <img
                              src={cert.logo}
                              alt={`${cert.issuer} logo`}
                              class="absolute -bottom-1 -right-1 h-6 w-6 md:h-7 md:w-7 text-amber-50 object-contain drop-shadow-md"
                              loading={index < 3 ? "eager" : "lazy"}
                              fetchpriority={index < 3 ? "high" : "auto"}
                              decoding="async"
                            />
                          )}
                        </div>
                      )}
                    </div>

                    <div class="mt-3 flex flex-wrap gap-2">
                      {Array.isArray(cert.tags) &&
                        cert.tags.map((t) => (
                          <span
                            class="inline-flex items-center rounded-full border px-2 py-0.5 text-[0.7rem] font-medium leading-none transition-colors"
                            style={`border-color: color-mix(in srgb, ${isHidden ? "var(--accent-real)" : "var(--accent)"} 70%, transparent); color: ${isHidden ? "var(--accent-real)" : "var(--accent)"}; background: color-mix(in srgb, ${isHidden ? "var(--accent-real)" : "var(--accent)"} 20%, transparent);`}
                          >
                            {t}
                          </span>
                        ))}
                    </div>

                    <div class="relative mt-6 flex items-center justify-between">
                      <div class="flex items-center gap-2">
                        {expired ? (
                          <span class="relative inline-flex items-center rounded-full border border-rose-400 text-rose-700 dark:text-rose-300 bg-rose-50 dark:bg-rose-400/10 px-2.5 py-0.5 text-xs font-semibold tracking-wide ring-1 ring-rose-400/20 transition-colors group-hover:ring-rose-400/40 overflow-hidden">
                            <span
                              aria-hidden="true"
                              class="pointer-events-none absolute inset-0 -translate-x-[120%] bg-gradient-to-r from-transparent via-rose-300/40 to-transparent transition-transform duration-700 ease-out will-change-transform group-hover:translate-x-[120%]"
                            />
                            <span class="relative z-[1]">Expired</span>
                          </span>
                        ) : obtained ? (
                          <span class="relative inline-flex items-center rounded-full border border-emerald-400 text-emerald-700 dark:text-emerald-300 bg-emerald-50 dark:bg-emerald-400/10 px-2.5 py-0.5 text-xs font-semibold tracking-wide ring-1 ring-emerald-400/20 transition-colors group-hover:ring-emerald-400/40 overflow-hidden">
                            <span
                              aria-hidden="true"
                              class="pointer-events-none absolute inset-0 -translate-x-[120%] bg-gradient-to-r from-transparent via-emerald-300/40 to-transparent transition-transform duration-700 ease-out will-change-transform group-hover:translate-x-[120%]"
                            />
                            <span class="relative z-[1]">Completed</span>
                          </span>
                        ) : isHidden ? (
                          <span class="relative inline-flex items-center rounded-full border border-gray-400 text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-400/10 px-2.5 py-0.5 text-xs font-semibold tracking-wide ring-1 ring-gray-400/20 transition-colors group-hover:ring-gray-400/40 overflow-hidden">
                            <span
                              aria-hidden="true"
                              class="pointer-events-none absolute inset-0 -translate-x-[120%] bg-gradient-to-r from-transparent via-gray-300/40 to-transparent transition-transform duration-700 ease-out will-change-transform group-hover:translate-x-[120%]"
                            />
                            <span class="relative z-[1]">Backlog</span>
                          </span>
                        ) : (
                          <span class="relative inline-flex items-center rounded-full border border-yellow-400 text-yellow-700 dark:text-yellow-300 bg-yellow-50 dark:bg-yellow-400/10 px-2.5 py-0.5 text-xs font-semibold tracking-wide ring-1 ring-yellow-400/20 transition-colors group-hover:ring-yellow-400/40 overflow-hidden">
                            <span
                              aria-hidden="true"
                              class="pointer-events-none absolute inset-0 -translate-x-[120%] bg-gradient-to-r from-transparent via-yellow-300/40 to-transparent transition-transform duration-700 ease-out will-change-transform group-hover:translate-x-[120%]"
                            />
                            <span class="relative z-[1]">In Progress</span>
                          </span>
                        )}
                        <div class="text-sm text-zinc-600 dark:text-white/70">
                          {expired && expiresStr ? (
                            <span>
                              <span class="sr-only">Expired: </span>
                              <time datetime={expiresStr}>{expiresStr}</time>
                            </span>
                          ) : obtained ? (
                            <span>
                              <span class="sr-only">Completed: </span>
                              <time datetime={obtainedStr}>{obtainedStr}</time>
                            </span>
                          ) : (
                            <time datetime="TBD">—</time>
                          )}
                        </div>
                      </div>
                      {cert.badgelink && (
                        <span
                          class="text-sm font-medium group-hover:underline"
                          style={`color: ${isHidden ? "var(--accent-real)" : "var(--accent)"}`}
                        >
                          View badge
                        </span>
                      )}
                    </div>
                  </CardTag>
                </article>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('toggleHiddenCerts');
    const hiddenCerts = document.querySelectorAll('.hidden-cert');
    let isShowing = false;

    toggleButton?.addEventListener('click', () => {
      isShowing = !isShowing;
      
      hiddenCerts.forEach(cert => {
        if (isShowing) {
          cert.classList.add('show');
        } else {
          cert.classList.remove('show');
        }
      });

      // Update button state and text
      const text = toggleButton.querySelector('span:not(.icon-wrapper)');
      
      if (text) {
        if (isShowing) {
          toggleButton.classList.add('active');
          text.textContent = 'Hide Hidden';
        } else {
          toggleButton.classList.remove('active');
          text.textContent = 'Show Hidden';
        }
      }
      
      // Toggle button state for icon swap
      toggleButton.classList.toggle('showing');
    });

    // Mobile scroll-to-center with auto-hover functionality
    const container = document.getElementById('certificationsContainer');
    const section = document.getElementById('certifications');
    
    if (!container || !section) return;

    let scrollTimeout: number | null = null;
    let isUserScrolling = false;
    let isMobile = window.innerWidth < 640;
    let observer: IntersectionObserver | null = null;
    let rafId: number | null = null;

    // Update mobile state on resize
    const updateMobileState = () => {
      const wasMobile = isMobile;
      isMobile = window.innerWidth < 640;
      
      // If switching from desktop to mobile or vice versa, cleanup
      if (wasMobile !== isMobile) {
        cleanup();
        if (isMobile) {
          initMobileScrollBehavior();
        }
      }
    };

    const cleanup = () => {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
        scrollTimeout = null;
      }
      if (rafId) {
        cancelAnimationFrame(rafId);
        rafId = null;
      }
      if (observer) {
        observer.disconnect();
        observer = null;
      }
      // Remove scroll listener
      window.removeEventListener('scroll', onScroll);
      // Remove all mobile-active classes
      document.querySelectorAll('.cert-item.mobile-active').forEach(item => {
        item.classList.remove('mobile-active');
      });
    };

    const findCenterCard = (): HTMLElement | null => {
      const items = Array.from(container.querySelectorAll('.cert-item:not(.hidden-cert), .cert-item.show')) as HTMLElement[];
      if (items.length === 0) return null;

      // Use viewport center for detection
      const viewportCenter = window.innerHeight / 2;

      // Get bounds of first and last card
      const firstCard = items[0];
      const lastCard = items[items.length - 1];
      const firstRect = firstCard.getBoundingClientRect();
      const lastRect = lastCard.getBoundingClientRect();

      // Check if viewport center is within the range of cards
      const firstCardTop = firstRect.top;
      const lastCardBottom = lastRect.bottom;

      // If viewport center is not within the card list bounds, return null
      if (viewportCenter < firstCardTop || viewportCenter > lastCardBottom) {
        return null;
      }

      let closestItem: HTMLElement | null = null;
      let closestDistance = Infinity;

      items.forEach(item => {
        const rect = item.getBoundingClientRect();
        const itemCenter = rect.top + rect.height / 2;
        const distance = Math.abs(viewportCenter - itemCenter);

        if (distance < closestDistance) {
          closestDistance = distance;
          closestItem = item;
        }
      });

      // Only return the card if it's reasonably close to center (within viewport)
      if (closestItem && closestDistance < window.innerHeight * 0.4) {
        return closestItem;
      }

      return null;
    };

    const scrollToCenter = (item: HTMLElement) => {
      if (!item) return;
      
      const rect = item.getBoundingClientRect();
      const viewportCenter = window.innerHeight / 2;
      const itemCenter = rect.top + rect.height / 2;
      const scrollOffset = itemCenter - viewportCenter;
      
      // Scroll the window, not the container
      window.scrollBy({
        top: scrollOffset,
        behavior: 'smooth'
      });
    };

    const applyHoverEffect = (item: HTMLElement | null) => {
      // Remove hover effect from all items
      document.querySelectorAll('.cert-item.mobile-active').forEach(el => {
        el.classList.remove('mobile-active');
      });

      // Apply to the centered item
      if (item) {
        item.classList.add('mobile-active');
      }
    };

    const handleScrollEnd = () => {
      if (!isMobile) return;

      const centerCard = findCenterCard();
      if (centerCard) {
        // Check if we're actually in the section
        const sectionRect = section.getBoundingClientRect();
        const viewportCenter = window.innerHeight / 2;
        
        // Only auto-scroll if viewport center is within the section bounds
        if (viewportCenter >= sectionRect.top && viewportCenter <= sectionRect.bottom) {
          scrollToCenter(centerCard);
          
          // Keep the hover effect on the card (already applied during scroll)
          setTimeout(() => {
            if (!isUserScrolling) {
              // Re-apply in case the card changed after auto-scroll
              const finalCard = findCenterCard();
              applyHoverEffect(finalCard);
            }
          }, 300);
        }
      }
    };

    const onScroll = () => {
      if (!isMobile) return;
      
      isUserScrolling = true;
      
      // Use requestAnimationFrame for smooth updates
      if (rafId) {
        cancelAnimationFrame(rafId);
      }
      
      rafId = requestAnimationFrame(() => {
        // Apply hover effect immediately to the card closest to center while scrolling
        const centerCard = findCenterCard();
        applyHoverEffect(centerCard);
        rafId = null;
      });

      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }

      scrollTimeout = window.setTimeout(() => {
        isUserScrolling = false;
        handleScrollEnd();
      }, 150);
    };

    const initMobileScrollBehavior = () => {
      if (!isMobile) return;

      // Set up scroll listener on window for mobile
      window.addEventListener('scroll', onScroll, { passive: true });

      // Set up intersection observer to detect when section is in view
      observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (!entry.isIntersecting) {
              // Section is not visible, cleanup
              applyHoverEffect(null);
              isUserScrolling = false;
              if (scrollTimeout) {
                clearTimeout(scrollTimeout);
                scrollTimeout = null;
              }
            } else if (!isUserScrolling) {
              // Section became visible and user is not scrolling
              // Apply effect to center card if exists
              setTimeout(() => {
                const sectionRect = section.getBoundingClientRect();
                const viewportCenter = window.innerHeight / 2;
                
                // Only apply if viewport center is within section
                if (viewportCenter >= sectionRect.top && viewportCenter <= sectionRect.bottom) {
                  const centerCard = findCenterCard();
                  if (centerCard) {
                    applyHoverEffect(centerCard);
                  }
                }
              }, 100);
            }
          });
        },
        {
          threshold: 0.2,
          rootMargin: '-20% 0px -20% 0px'
        }
      );

      observer.observe(section);

      // Initial check
      setTimeout(() => {
        if (!isUserScrolling) {
          const centerCard = findCenterCard();
          if (centerCard) {
            applyHoverEffect(centerCard);
          }
        }
      }, 500);
    };

    // Initialize if mobile
    if (isMobile) {
      initMobileScrollBehavior();
    }

    // Handle resize
    window.addEventListener('resize', updateMobileState);

    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanup);
  });
</script>